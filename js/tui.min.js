document.addEventListener("DOMContentLoaded", async () => {
  const MAIN_CONTAINER = document.getElementById("main-container");
  const SECTION_CONTAINER = document.getElementById("section-container");
  const LEFT_SECTION = document.getElementById("left-section");
  const RIGHT_SECTION = document.getElementById("right-section");
  const HOME_SECTION = document.getElementById("home");
  const SKILLS_SECTION = document.getElementById("skills");
  const EXPERIENCE_SECTION = document.getElementById("experience");
  const PROJECTS_SECTION = document.getElementById("projects");
  const FOOTER_SECTION = document.getElementById("footer");
  const MAIN_CONTENT_SECTION = document.getElementById("main-content")?.getElementsByClassName("container-content")[0];

  const COLORS = ["text-blue", "text-orange", "text-pink"];

  const left_sections = [
    { name: "home", section: HOME_SECTION, items: [] },
    { name: "experience", section: EXPERIENCE_SECTION, items: EXPERIENCE_SECTION ? [...EXPERIENCE_SECTION.querySelectorAll(".ui-list > *")] : [] },
    { name: "projects", section: PROJECTS_SECTION, items: PROJECTS_SECTION ? [...PROJECTS_SECTION.querySelectorAll(".ui-list > *")] : [] },
    { name: "skills", section: SKILLS_SECTION, items: SKILLS_SECTION ? [...SKILLS_SECTION.querySelectorAll(".ui-list > *")] : [] },
  ];

  let currentPosition = { sectionIndex: 0, sectionItemIndex: 0 };
  let previousPosition = { sectionIndex: 0, sectionItemIndex: 0 };

  function clamp(a, b, c) { return Math.min(Math.max(a, b), c); }
  function isMobile() { return window.innerWidth <= 768; }
  function getRandomTextColorClass() { return COLORS[Math.floor(Math.random() * COLORS.length)]; }
  function colorizeString(a) { return a.replaceAll("{{", () => `<span class="${getRandomTextColorClass()}">`).replaceAll("}}", "</span>"); }

  async function getCodeSnippet(a) {
    const res = await fetch(`../data/snippets/snippet.${a}`);
    return await res.text();
  }

  function clearMainContent() {
    if (!MAIN_CONTENT_SECTION) return;
    MAIN_CONTENT_SECTION.innerHTML = "";
    MAIN_CONTENT_SECTION.scrollTo({ top: 0 });
  }

  async function displayContent() {
    if (!MAIN_CONTENT_SECTION) return;
    clearMainContent();
    const sectionName = left_sections[currentPosition.sectionIndex].name;
    const res = await fetch(`data/${sectionName}.json`);
    const { data } = await res.json();

    const outer = document.createElement("div");
    outer.classList.add("outer-paragraph-container");
    const inner = document.createElement("div");
    inner.classList.add("inner-paragraph-container");

    if (sectionName !== "home") {
      inner.classList.add("mt-4");
      const item = data[currentPosition.sectionItemIndex];

      if (item) {
        const titleDiv = document.createElement("div");
        const h1 = document.createElement("h1");
        h1.innerHTML = item.title ? `<span class="${getRandomTextColorClass()}">${item.title}</span>` : "";
        titleDiv.appendChild(h1);

        const h2date = document.createElement("h2");
        h2date.innerHTML = item.date ? `<span class="${getRandomTextColorClass()}">${item.date}</span>` : "";
        titleDiv.appendChild(h2date);

        const h2year = document.createElement("h2");
        h2year.innerHTML = item.year ? `[Built in <span class="${getRandomTextColorClass()}">${item.year}</span>]` : "";
        titleDiv.appendChild(h2year);

        const techDiv = document.createElement("div");
        techDiv.classList.add("technologies-row");
        techDiv.innerHTML = item.technologies?.map(colorizeString).join(" ") || "";
        inner.appendChild(titleDiv);
        inner.appendChild(techDiv);

        if (item.images) {
          item.images.forEach(imgName => {
            const imgWrapper = document.createElement("div");
            imgWrapper.classList.add("image-inner-container");
            imgWrapper.style.minHeight = "200px";
            const img = document.createElement("img");
            img.src = `../images/${imgName}`;
            img.alt = "Project image";
            img.loading = "lazy";
            img.decoding = "async";
            img.classList.add("project-image");
            imgWrapper.appendChild(img);
            inner.appendChild(imgWrapper);
          });
        }

        if (item.snippet) {
          const snipDiv = document.createElement("div");
          snipDiv.classList.add("snippet-container");
          const pre = document.createElement("pre");
          const code = document.createElement("code");
          code.classList.add(item.snippet);
          code.innerText = await getCodeSnippet(item.snippet);
          pre.appendChild(code);
          snipDiv.appendChild(pre);
          inner.appendChild(snipDiv);
        }
      }
    }

    outer.appendChild(inner);
    MAIN_CONTENT_SECTION.appendChild(outer);
  }

  function savePreviousPosition() {
    previousPosition.sectionIndex = currentPosition.sectionIndex;
    previousPosition.sectionItemIndex = currentPosition.sectionItemIndex;
  }

  function goToSection(index, itemIndex = 0) {
    savePreviousPosition();
    currentPosition.sectionIndex = clamp(index, 0, left_sections.length - 1);
    currentPosition.sectionItemIndex = clamp(itemIndex, 0, left_sections[currentPosition.sectionIndex].items.length - 1);
  }

  async function render(force = false) {
    if (!force) return;
    await displayContent();
  }

  function initKeyboardListeners() {
    document.addEventListener("keydown", async e => {
      const { key } = e;
      if (key === "ArrowRight") goToSection(currentPosition.sectionIndex + 1);
      if (key === "ArrowLeft") goToSection(currentPosition.sectionIndex - 1);
      await render(true);
    });
  }

  function initMouseListeners() {
    left_sections.forEach((section, si) => {
      section.items.forEach((item, ii) => {
        item.addEventListener("click", async () => {
          goToSection(si, ii);
          await render(true);
        });
      });
      section.section?.addEventListener("click", async () => {
        goToSection(si);
        await render(true);
      });
    });
  }

  async function init() {
    initKeyboardListeners();
    initMouseListeners();
    await render(true);
  }

  // start it
  await init();
});
