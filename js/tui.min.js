const MAIN_CONTAINER = document.getElementById("main-container"),
      SECTION_CONTAINER = document.getElementById("section-container"),
      LEFT_SECTION = document.getElementById("left-section"),
      RIGHT_SECTION = document.getElementById("right-section"),
      HOME_SECTION = document.getElementById("home"),
      SKILLS_SECTION = document.getElementById("skills"),
      EXPERIENCE_SECTION = document.getElementById("experience"),
      PROJECTS_SECTION = document.getElementById("projects"),
      FOOTER_SECTION = document.getElementById("footer"),
      MAIN_CONTENT_SECTION = document.getElementById("main-content")?.getElementsByClassName("container-content")[0],
      COLORS = ["text-blue","text-orange","text-pink"],
      left_sections = [
          { name: "home", section: HOME_SECTION, items: [] },
          { name: "experience", section: EXPERIENCE_SECTION, items: [...EXPERIENCE_SECTION.firstElementChild.children[2].children] },
          { name: "projects", section: PROJECTS_SECTION, items: [...PROJECTS_SECTION.firstElementChild.children[2].children] },
          { name: "skills", section: SKILLS_SECTION, items: [...SKILLS_SECTION.firstElementChild.children[2].children] }
      ],
      currentPosition = { sectionIndex:0, sectionItemIndex:0 },
      previousPosition = { sectionIndex:0, sectionItemIndex:0 };

function clamp(a,b,c){return Math.min(Math.max(a,b),c)}
function isMobile(){return 768>=window.innerWidth}

function getRandomTextColorClass(){return COLORS[Math.floor(Math.random()*COLORS.length)]}
function colorizeString(a){return a.replaceAll("{{",()=>`<span class="${getRandomTextColorClass()}">`).replaceAll("}}","</span>")}

function colorizeCode(){
    const a = document.getElementsByTagName("code")[0];
    if(!a) return;
    const b = a.innerText,
          c = a.classList[0],
          d = { js: javascriptKeywords, ts: typescriptKeywords, sql: sqlKeywords, mjs: nodeKeywords, html: htmlKeywords, css: cssKeywords, go: goKeywords, c: cKeywords, graphql: graphqlKeywords, tsx: reactKeywords, test: testKeywords, sh: bashKeywords, yml: yamlKeywords, ino: arduinoKeywords }[c];
    if(!d) return;
    let e = b;
    d.forEach((a,b)=>{if(a.length!==0){const c = new RegExp(`\\b(${a.join("|")})\\b`, "g"); e = e.replaceAll(c, t=>`<span class="${COLORS[b]}">${t}</span>`)}})
    a.innerHTML = e;
}

async function getCodeSnippet(a){
    const b = await fetch(`../data/snippets/snippet.${a}`);
    return await b.text();
}

function isVisibleInScrollView(a,b){
    const c = a.offsetTop, d = c + a.clientHeight, e = b.scrollTop, f = e + b.clientHeight;
    return c>=e && d<=f;
}

function onHamburgerMenuPress(){
    const a = document.getElementsByName("hamburger-toggle")[0],
          b = document.getElementsByClassName("nav-container")[0];
    a.checked ? (LEFT_SECTION.classList.add("menu-open"), b.style.opacity=1) : (LEFT_SECTION.classList.remove("menu-open"), b.style.opacity=.9);
}

function closeHamburgerMenu(){
    const a = document.getElementsByName("hamburger-toggle")[0];
    a.checked = false;
    LEFT_SECTION.classList.remove("menu-open");
}

function clearMainContent(){
    MAIN_CONTENT_SECTION.innerHTML = "";
    MAIN_CONTENT_SECTION.scrollTo({top:0});
}

async function displayContent(){
    const random = Math.floor;
    clearMainContent();
    const sectionName = left_sections[currentPosition.sectionIndex].name,
          resp = await fetch(`data/${sectionName}.json`),
          { data } = await resp.json();
    const outer = document.createElement("div"); outer.classList.add("outer-paragraph-container");
    const inner = document.createElement("div"); inner.classList.add("inner-paragraph-container");

    if(sectionName !== "home"){
        inner.classList.add("mt-4");
        const item = data[currentPosition.sectionItemIndex],
              container = document.createElement("div"),
              h1 = document.createElement("h1"); h1.innerHTML = item.title ? `<span class="${getRandomTextColorClass()}">${item.title}</span>` : null,
              h2_date = document.createElement("h2"); h2_date.innerHTML = item.date ? `<span class="${getRandomTextColorClass()}">${item.date}</span>` : null,
              h2_year = document.createElement("h2"); h2_year.innerHTML = item.year ? `[Built in <span class="${getRandomTextColorClass()}">${item.year}</span>]` : null,
              techs = document.createElement("div"); techs.classList.add("technologies-row"); techs.innerHTML = item.technologies?.map(a=>colorizeString(a)).join(" ")||null,
              github = document.createElement("a"); github.classList.add("project-button"); github.href = item?.githubUrl; github.target="_blank"; github.innerText="Github",
              demo = document.createElement("a"); demo.classList.add("project-button"); demo.href = item?.demoUrl; demo.target="_blank"; demo.innerText="Demo",
              btns = document.createElement("div"); btns.classList.add("buttons-container"); if(item?.githubUrl) btns.appendChild(github); if(item?.demoUrl) btns.appendChild(demo);
        
        if(h1.innerHTML) container.appendChild(h1); if(h2_date.innerHTML) container.appendChild(h2_date); if(h2_year.innerHTML) container.appendChild(h2_year);
        if(techs.innerHTML) container.appendChild(techs); if(btns.children.length>0) container.appendChild(btns);

        const images = item.images?.map(img=>{
            const div = document.createElement("div"); div.style.minHeight="200px"; div.classList.add("image-inner-container");
            const i = document.createElement("img"); i.loading="lazy"; i.alt="Project image"; i.decoding="async"; i.src=`../images/${img}`; i.classList.add("project-image"); div.appendChild(i); return div;
        }) ?? [];

        item.content.forEach((c,i)=>{
            const p = document.createElement("div"); p.innerHTML=colorizeString(c).replaceAll("\n","<br>"); inner.appendChild(p);
            if(i<images.length){const div = document.createElement("div"); div.classList.add("image-container"); div.appendChild(images[i]); inner.appendChild(div);}
        });

        if(item.snippet){const snip = document.createElement("div"); snip.classList.add("snippet-container"); const pre = document.createElement("pre"), code = document.createElement("code"); code.classList.add(item.snippet); pre.appendChild(code); code.innerText = await getCodeSnippet(item.snippet); snip.appendChild(pre); inner.appendChild(snip);}
        inner.prepend(container);
        outer.appendChild(inner);
        clearMainContent(); MAIN_CONTENT_SECTION.appendChild(outer); colorizeCode();
    } else {
        const imgPath = `images/logo${random(4*Math.random())+1}.svg`,
              div = document.createElement("div"); div.id="logo-container";
        const img = document.createElement("img"); img.loading="eager"; img.src=imgPath; img.id="logo"; img.alt="Wallenart"; div.appendChild(img);
        clearMainContent(); MAIN_CONTENT_SECTION.appendChild(div);

        data.forEach(section=>{
            const secDiv = document.createElement("div");
            section.content.forEach(txt=>{
                const p = document.createElement("p"); p.innerHTML=colorizeString(txt); secDiv.appendChild(p);
            });
            inner.appendChild(secDiv);
        });
        outer.appendChild(inner); MAIN_CONTENT_SECTION.appendChild(outer);
    }
}

function clearSelectionStyling(a){
    if(isMobile()){
        const sel = document.getElementsByClassName("selected-item")[0],
              frame = document.getElementsByClassName("selected-frame")[0];
        if(sel) sel.classList.remove("selected-item");
        if(frame) frame.classList.remove("selected-frame");
    }
    const sect = left_sections[previousPosition.sectionIndex],
          item = sect.items[previousPosition.sectionItemIndex],
          idx = sect.section.getElementsByClassName("list-index")[0]?.firstElementChild,
          uiList = sect.section.getElementsByClassName("ui-list")[0];
    sect.section.classList.remove("selected-frame");
    item?.classList.remove("selected-item");
    if(idx) idx.innerText=`1 of ${sect.items.length}`;
    if(uiList && a) uiList.scrollTo({top:0});
}

async function render(a=false,b=false){
    if(!isMobile() && !b && currentPosition.sectionIndex===previousPosition.sectionIndex && currentPosition.sectionItemIndex===previousPosition.sectionIndex) return;
    const sect = left_sections[currentPosition.sectionIndex],
          item = sect.items?.[currentPosition.sectionItemIndex],
          idx = sect.section.getElementsByClassName("list-index")[0]?.firstElementChild,
          uiList = sect.section.getElementsByClassName("ui-list")[0];
    clearSelectionStyling(a);
    sect.section.classList.add("selected-frame");
    if(item) item.classList.add("selected-item");
    if(idx) idx.innerText=`${currentPosition.sectionItemIndex+1} of ${sect.items.length}`;
    if(uiList && item && !isVisibleInScrollView(item, uiList) && previousPosition.sectionItemIndex!==currentPosition.sectionItemIndex){
        const gap = parseInt(window.getComputedStyle(item).gap);
        uiList.scrollBy({top:previousPosition.sectionItemIndex<currentPosition.sectionItemIndex?item.clientHeight+gap:-item.clientHeight-gap, behavior:"instant"});
    }
    if(!b) displayContent();
    if(isMobile()) closeHamburgerMenu();
}

function savePreviousPosition(){ previousPosition.sectionIndex=currentPosition.sectionIndex; previousPosition.sectionItemIndex=currentPosition.sectionItemIndex; }
function goToSection(a,b=0){ savePreviousPosition(); currentPosition.sectionIndex=clamp(0,a,left_sections.length-1); currentPosition.sectionItemIndex=clamp(0,b,left_sections[currentPosition.sectionIndex].items.length-1);}
function goToNextSection(){ savePreviousPosition(); currentPosition.sectionIndex=clamp(0,currentPosition.sectionIndex+1,left_sections.length-1); currentPosition.sectionItemIndex=0; }
function goToPreviousSection(){ savePreviousPosition(); currentPosition.sectionIndex=clamp(0,currentPosition.sectionIndex-1,left_sections.length-1); currentPosition.sectionItemIndex=0; }
function goToNextItem(){ savePreviousPosition(); currentPosition.sectionItemIndex=clamp(0,currentPosition.sectionItemIndex+1,left_sections[currentPosition.sectionIndex].items.length-1);}
function goToPreviousItem(){ savePreviousPosition(); currentPosition.sectionItemIndex=clamp(0,currentPosition.sectionItemIndex-1,left_sections[currentPosition.sectionIndex].items.length-1);}

function scrollMainContentDown(){ MAIN_CONTENT_SECTION?.scrollBy({top:MAIN_CONTENT_SECTION.clientHeight/2}); }
function scrollMainContentUp(){ MAIN_CONTENT_SECTION?.scrollBy({top:-(MAIN_CONTENT_SECTION.clientHeight/2)}); }

function initKeyboardListeners(){
    addEventListener("keydown", async e=>{
        let b=false;
        const {key:k, code:c, ctrlKey:ctrl} = e;
        if((k.includes("Arrow")||k.includes("Page"))&&e.preventDefault(), k==="PageDown"||ctrl&&"d"===k) return void scrollMainContentDown();
        if(k==="PageUp"||ctrl&&"u"===k) return void scrollMainContentUp();
        if(k==="ArrowUp"||k==="k"){ if(currentPosition.sectionIndex!==0) goToPreviousItem(); }
        else if(k==="ArrowDown"||k==="j"){ if(currentPosition.sectionIndex!==0) goToNextItem(); }
        else if(k==="ArrowLeft"||k==="h"){ goToPreviousSection(); b=true; }
        else if(k==="ArrowRight"||k==="l"){ goToNextSection(); b=true; }
        else if(c.includes("Digit")){ goToSection(parseInt(k)-1); b=true; }
        else return;
        await render(b);
    });
}

function initMouseListeners(){
    left_sections.forEach((section, sIdx)=>{
        section.items.forEach((item, iIdx)=>{
            item.addEventListener("click", async e=>{
                e.stopPropagation(); goToSection(sIdx, iIdx); await render(sIdx!==previousPosition.sectionIndex);
            });
        });
        section.section.addEventListener("click", async()=>{ goToSection(sIdx); await render(sIdx!==previousPosition.sectionIndex); });
    });
}

function initTouchListeners(){
    if(!isMobile()) return;
    const ham = document.getElementsByName("hamburger-toggle")[0];
    ham.addEventListener("click",()=>{ onHamburgerMenuPress(); });
}

async function init(){
    initKeyboardListeners();
    initMouseListeners();
    initTouchListeners();
    await render(true,true);
}
